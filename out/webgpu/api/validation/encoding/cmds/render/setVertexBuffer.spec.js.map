{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setVertexBuffer.spec.ts"],"names":["description","makeTestGroup","GPUConst","DefaultLimits","ValidationTest","kRenderEncodeTypeParams","kBufferStates","buildBufferOffsetAndSizeOOBTestParams","g","test","desc","paramsSubcasesOnly","combine","maxVertexBuffers","fn","t","encoderType","slot","params","vertexBuffer","createBufferWithState","size","usage","GPUBufferUsage","VERTEX","encoder","validateFinish","createEncoder","setVertexBuffer","state","validateFinishAndSubmitGivenState","BufferUsage","COPY_DST","device","createBuffer","offset","finish","_valid"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for setVertexBuffer on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst, DefaultLimits } from '../../../../../constants.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport {\n  kRenderEncodeTypeParams,\n  kBufferStates,\n  buildBufferOffsetAndSizeOOBTestParams,\n} from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('slot')\n  .desc(\n    `\nTests slot must be less than the maxVertexBuffers in device limits.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('slot', [\n      0,\n      DefaultLimits.maxVertexBuffers - 1,\n      DefaultLimits.maxVertexBuffers,\n    ] as const)\n  )\n  .fn(t => {\n    const { encoderType, slot } = t.params;\n    const vertexBuffer = t.createBufferWithState('valid', {\n      size: 16,\n      usage: GPUBufferUsage.VERTEX,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setVertexBuffer(slot, vertexBuffer);\n    validateFinish(slot < DefaultLimits.maxVertexBuffers);\n  });\n\ng.test('vertex_buffer')\n  .desc(\n    `\nTests vertex buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('state', kBufferStates))\n  .fn(t => {\n    const { encoderType, state } = t.params;\n    const vertexBuffer = t.createBufferWithState(state, {\n      size: 16,\n      usage: GPUBufferUsage.VERTEX,\n    });\n\n    const { encoder, validateFinishAndSubmitGivenState } = t.createEncoder(encoderType);\n    encoder.setVertexBuffer(0, vertexBuffer);\n    validateFinishAndSubmitGivenState(state);\n  });\n\ng.test('vertex_buffer_usage')\n  .desc(\n    `\nTests vertex buffer must have 'Vertex' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('usage', [\n      GPUConst.BufferUsage.VERTEX, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.VERTEX,\n    ] as const)\n  )\n  .fn(t => {\n    const { encoderType, usage } = t.params;\n    const vertexBuffer = t.device.createBuffer({\n      size: 16,\n      usage,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setVertexBuffer(0, vertexBuffer);\n    validateFinish((usage & GPUBufferUsage.VERTEX) !== 0);\n  });\n\ng.test('offset_alignment')\n  .desc(\n    `\nTests offset must be a multiple of 4.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('offset', [0, 2, 4] as const))\n  .fn(t => {\n    const { encoderType, offset } = t.params;\n    const vertexBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.VERTEX,\n    });\n\n    const { encoder, validateFinish: finish } = t.createEncoder(encoderType);\n    encoder.setVertexBuffer(0, vertexBuffer, offset);\n    finish(offset % 4 === 0);\n  });\n\ng.test('offset_and_size_oob')\n  .desc(\n    `\nTests offset and size cannot be larger than vertex buffer size.\n  `\n  )\n  .paramsSubcasesOnly(buildBufferOffsetAndSizeOOBTestParams(4, 256))\n  .fn(t => {\n    const { encoderType, offset, size, _valid } = t.params;\n    const vertexBuffer = t.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.VERTEX,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setVertexBuffer(0, vertexBuffer, offset, size);\n    validateFinish(_valid);\n  });\n"],"file":"setVertexBuffer.spec.js"}