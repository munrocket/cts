{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/indirect_draw.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","kRenderEncodeTypeParams","kBufferStates","kIndirectDrawTestParams","combine","F","makeIndexBuffer","device","createBuffer","size","usage","GPUBufferUsage","INDEX","g","test","desc","paramsSubcasesOnly","fn","t","encoderType","indexed","state","params","pipeline","createNoOpRenderPipeline","indirectBuffer","createBufferWithState","INDIRECT","encoder","finish","createEncoder","setPipeline","indexBuffer","setIndexBuffer","drawIndexedIndirect","drawIndirect","expectValidationError","queue","submit","BufferUsage","COPY_DST","indirectOffset","expandWithParams","p","indirectParamsSize","bufferSize","_valid"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for drawIndirect/drawIndexedIndirect on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../../constants.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport { kRenderEncodeTypeParams, kBufferStates } from './render.js';\n\nconst kIndirectDrawTestParams = kRenderEncodeTypeParams.combine('indexed', [true, false] as const);\n\nclass F extends ValidationTest {\n  makeIndexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.INDEX,\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('indirect_buffer')\n  .desc(\n    `\nTests indirect buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kIndirectDrawTestParams.combine('state', kBufferStates))\n  .fn(t => {\n    const { encoderType, indexed, state } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.createBufferWithState(state, {\n      size: 256,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, finish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, 0);\n    } else {\n      encoder.drawIndirect(indirectBuffer, 0);\n    }\n\n    t.expectValidationError(() => {\n      if (state === 'destroyed') {\n        t.queue.submit([finish()]);\n      } else {\n        finish();\n      }\n    }, state !== 'valid');\n  });\n\ng.test('indirect_buffer_usage')\n  .desc(\n    `\nTests indirect buffer must have 'Indirect' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kIndirectDrawTestParams.combine('usage', [\n      GPUConst.BufferUsage.INDIRECT, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.INDIRECT,\n    ] as const)\n  )\n  .fn(t => {\n    const { encoderType, indexed, usage } = t.params;\n    const indirectBuffer = t.device.createBuffer({\n      size: 256,\n      usage,\n    });\n\n    const { encoder, finish } = t.createEncoder(encoderType);\n    encoder.setPipeline(t.createNoOpRenderPipeline());\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, 0);\n    } else {\n      encoder.drawIndirect(indirectBuffer, 0);\n    }\n\n    t.expectValidationError(() => {\n      finish();\n    }, (usage | GPUConst.BufferUsage.INDIRECT) !== usage);\n  });\n\ng.test('indirect_offset_alignment')\n  .desc(\n    `\nTests indirect offset must be a multiple of 4.\n  `\n  )\n  .paramsSubcasesOnly(kIndirectDrawTestParams.combine('indirectOffset', [0, 2, 4] as const))\n  .fn(t => {\n    const { encoderType, indexed, indirectOffset } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, finish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    } else {\n      encoder.drawIndirect(indirectBuffer, indirectOffset);\n    }\n\n    t.expectValidationError(() => {\n      finish();\n    }, indirectOffset % 4 !== 0);\n  });\n\ng.test('indirect_offset_oob')\n  .desc(\n    `\nTests indirect draw calls with various indirect offsets and buffer sizes.\n- (offset, b.size) is\n  - (0, 0)\n  - (0, min size) (control case)\n  - (0, min size + 1) (control case)\n  - (0, min size - 1)\n  - (0, min size - min alignment)\n  - (min alignment, min size + min alignment)\n  - (min alignment, min size + min alignment - 1)\n  - (min alignment / 2, min size + min alignment)\n  - (min alignment +/- 1, min size + min alignment)\n  - (min size, min size)\n  - (min size + min alignment, min size)\n  - min size = indirect draw parameters size\n  - x =(drawIndirect, drawIndexedIndirect)\n  `\n  )\n  .paramsSubcasesOnly(\n    kIndirectDrawTestParams.expandWithParams(p => {\n      const indirectParamsSize = p.indexed ? 20 : 16;\n      return [\n        { indirectOffset: 0, bufferSize: 0, _valid: false },\n        { indirectOffset: 0, bufferSize: indirectParamsSize, _valid: true },\n        { indirectOffset: 0, bufferSize: indirectParamsSize + 1, _valid: true },\n        { indirectOffset: 0, bufferSize: indirectParamsSize - 1, _valid: false },\n        { indirectOffset: 0, bufferSize: indirectParamsSize - 4, _valid: false },\n        { indirectOffset: 4, bufferSize: indirectParamsSize + 4, _valid: true },\n        { indirectOffset: 4, bufferSize: indirectParamsSize + 3, _valid: false },\n        { indirectOffset: 2, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: 3, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: 5, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: indirectParamsSize, bufferSize: indirectParamsSize, _valid: false },\n        { indirectOffset: indirectParamsSize + 4, bufferSize: indirectParamsSize, _valid: false },\n      ] as const;\n    })\n  )\n  .fn(t => {\n    const { encoderType, indexed, indirectOffset, bufferSize, _valid } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.device.createBuffer({\n      size: bufferSize,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, finish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    } else {\n      encoder.drawIndirect(indirectBuffer, indirectOffset);\n    }\n\n    t.expectValidationError(() => {\n      finish();\n    }, !_valid);\n  });\n"],"file":"indirect_draw.spec.js"}