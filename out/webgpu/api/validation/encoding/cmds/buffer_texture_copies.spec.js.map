{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/buffer_texture_copies.spec.ts"],"names":["description","makeTestGroup","assert","kDepthStencilFormats","depthStencilBufferTextureCopySupported","depthStencilFormatAspectSize","align","kBufferCopyAlignment","kBytesPerRowAlignment","ValidationTest","ImageCopyTest","testCopyBufferToTexture","source","destination","copySize","isSuccess","encoder","validateFinishAndSubmit","createEncoder","copyBufferToTexture","testCopyTextureToBuffer","copyTextureToBuffer","g","test","desc","params","u","combine","beginSubcases","fn","t","format","aspect","selectDeviceForTextureFormatOrSkipTestCase","textureSize","width","height","depthOrArrayLayers","texture","device","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","buffer","createBuffer","GPUBufferUsage","success","filter","param","copyType","texelAspectSize","bytesPerRow","rowsPerImage","minimumBufferSize","bigEnoughBuffer","smallerBuffer","offset"],"mappings":"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","sourcesContent":["export const description = `\ncopyTextureToBuffer and copyBufferToTexture validation tests not covered by\nthe general image_copy tests, or by destroyed,*.\n\nTODO:\n- Move all the tests here to image_copy/ and test writeTexture() with depth/stencil formats.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport {\n  kDepthStencilFormats,\n  depthStencilBufferTextureCopySupported,\n  depthStencilFormatAspectSize,\n} from '../../../../capability_info.js';\nimport { align } from '../../../../util/math.js';\nimport { kBufferCopyAlignment, kBytesPerRowAlignment } from '../../../../util/texture/layout.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass ImageCopyTest extends ValidationTest {\n  testCopyBufferToTexture(\n    source: GPUImageCopyBuffer,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyBufferToTexture(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n\n  testCopyTextureToBuffer(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyBuffer,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyTextureToBuffer(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n}\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('depth_stencil_format,copy_usage_and_aspect')\n  .desc(\n    `\n  Validate the combination of usage and aspect of each depth stencil format in copyBufferToTexture\n  and copyTextureToBuffer. See https://gpuweb.github.io/gpuweb/#depth-formats for more details.\n`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('aspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .fn(async t => {\n    const { format, aspect } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.device.createTexture({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 32,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyB2T', format, aspect);\n      t.testCopyBufferToTexture({ buffer }, { texture, aspect }, textureSize, success);\n    }\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyT2B', format, aspect);\n      t.testCopyTextureToBuffer({ texture, aspect }, { buffer }, textureSize, success);\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_size')\n  .desc(\n    `\n  Validate the minimum buffer size for each depth stencil format in copyBufferToTexture\n  and copyTextureToBuffer.\n\n  Given a depth stencil format, a copy aspect ('depth-only' or 'stencil-only'), the copy method\n  (buffer-to-texture or texture-to-buffer) and the copy size, validate\n  - if the copy can be successfully executed with the minimum required buffer size.\n  - if the copy fails with a validation error when the buffer size is less than the minimum\n  required buffer size.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 8, height: 1, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 3 },\n      ])\n  )\n  .fn(async t => {\n    const { format, aspect, copyType, copySize } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const texture = t.device.createTexture({\n      size: copySize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRow = align(texelAspectSize * copySize.width, kBytesPerRowAlignment);\n    const rowsPerImage = copySize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * copySize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * copySize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const bigEnoughBuffer = t.device.createBuffer({\n      size: minimumBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const smallerBuffer = t.device.createBuffer({\n      size: minimumBufferSize - kBufferCopyAlignment,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        true\n      );\n      t.testCopyBufferToTexture(\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        false\n      );\n    } else {\n      assert(copyType === 'CopyT2B');\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        true\n      );\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        false\n      );\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_offset')\n  .desc(\n    `\n    Validate for every depth stencil formats the buffer offset must be a multiple of 4 in\n    copyBufferToTexture() and copyTextureToBuffer().\n    `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('offset', [1, 2, 4, 6, 8])\n  )\n  .fn(async t => {\n    const { format, aspect, copyType, offset } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const textureSize = { width: 4, height: 4, depthOrArrayLayers: 1 };\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRow = align(texelAspectSize * textureSize.width, kBytesPerRowAlignment);\n    const rowsPerImage = textureSize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * textureSize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * textureSize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const buffer = t.device.createBuffer({\n      size: align(minimumBufferSize + offset, kBufferCopyAlignment),\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const isSuccess = offset % 4 === 0;\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        textureSize,\n        isSuccess\n      );\n    } else {\n      assert(copyType === 'CopyT2B');\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        textureSize,\n        isSuccess\n      );\n    }\n  });\n"],"file":"buffer_texture_copies.spec.js"}